#include "bits/stdc++.h"
using namespace std;

#define int long long
const int N = (int)(1e6 + 1);
const int mod = (int)(1e9 + 7);
vector<int> prefix(N);

void precompute(string &s)
{
    int hash = 0, pr = 1, n = s.length();
    
    for(int i = 0; i < n; i++)
    {
        hash = (hash + (((s[i] - 'a' + 1) * pr) % mod)) % mod;
        pr = (pr * 31) % mod;
        prefix[i] = hash;
    } 
}




int power(int base, int n, int MOD = mod)
{
    if(n == 0)
        return 1;
        
    else if(n&1)
        return (base * power(base, n - 1, MOD)) % MOD;
        
    return power((base * base) % MOD, n >> 1, MOD) % MOD;
}



signed main()
{
    string s;
    cin >> s;
    int q;
    cin >> q;
     
    precompute(s);
    
    while(q--)
    {
        int l1, r1, l2, r2;
        cin >> l1 >> r1 >> l2 >> r2;
        
        int hash1 = prefix[r1];
        if(l1 > 0)
            hash1 = (hash1 - prefix[l1 - 1 ] + mod) % mod;
            
        hash1 = (hash1 * power(power(31, l1, mod), mod - 2, mod)) % mod;
        
        
        int hash2 = prefix[r2];
        if(l2 > 0)
            hash2 = (hash2 - prefix[l2 - 1] + mod) % mod;
            
        hash2 = (hash2 * power(power(31, l2, mod), mod - 2, mod)) % mod;
        
        cout << hash1 << "\t" << hash2 << "\t";
        
        if(hash1 == hash2)
            cout << "Equal\n";
        else
            cout << "Not equal\n";
    }
    
    return 0;
}
